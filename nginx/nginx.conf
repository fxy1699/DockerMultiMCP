events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    '"$upstream_addr" "$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;
    
    # 基本设置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    client_max_body_size 50M;
    
    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # 上游服务器定义
    upstream xiaohongshu_mcp {
        server xiaohongshu-mcp:8001;
        keepalive 32;
    }
    
    upstream template_mcp {
        server template-mcp:8002;
        keepalive 32;
    }
    
    # 可以添加更多MCP服务
    # upstream your_service_mcp {
    #     server your-service-mcp:8003;
    #     keepalive 32;
    # }
    
    # 服务发现映射
    map $uri $mcp_service {
        ~^/api/xiaohongshu/  xiaohongshu_mcp;
        ~^/api/template/     template_mcp;
        # ~^/api/your-service/ your_service_mcp;
        default             xiaohongshu_mcp;  # 默认路由到小红书
    }
    
    # HTTP重定向到HTTPS (生产环境)
    server {
        listen 80;
        server_name _;
        
        # 健康检查端点 (HTTP)
        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }
        
        # 开发环境直接提供服务，生产环境重定向到HTTPS
        location / {
            # 生产环境：重定向到HTTPS
            # return 301 https://$server_name$request_uri;
            
            # 开发环境：直接代理
            proxy_pass http://$mcp_service;
            include /etc/nginx/proxy_params;
        }
    }
    
    # HTTPS服务器 (生产环境)
    server {
        listen 443 ssl http2;
        server_name _;
        
        # SSL配置
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # 安全头
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # 小红书MCP API
        location /api/xiaohongshu/ {
            rewrite ^/api/xiaohongshu/(.*) /$1 break;
            proxy_pass http://xiaohongshu_mcp;
            include /etc/nginx/proxy_params;
        }
        
        # 模板MCP API (开发用)
        location /api/template/ {
            rewrite ^/api/template/(.*) /$1 break;
            proxy_pass http://template_mcp;
            include /etc/nginx/proxy_params;
        }
        
        # 通用MCP SSE处理
        location ~ ^/api/([^/]+)/mcp/sse {
            set $service $1;
            rewrite ^/api/[^/]+/(.*) /$1 break;
            
            # 根据服务名选择上游
            if ($service = "xiaohongshu") {
                proxy_pass http://xiaohongshu_mcp;
            }
            if ($service = "template") {
                proxy_pass http://template_mcp;
            }
            
            # SSE专用设置
            proxy_buffering off;
            proxy_cache off;
            proxy_set_header Connection '';
            proxy_http_version 1.1;
            chunked_transfer_encoding off;
            
            include /etc/nginx/proxy_params;
            
            # SSE超时设置
            proxy_connect_timeout 60s;
            proxy_send_timeout 3600s;
            proxy_read_timeout 3600s;
        }
        
        # 服务状态聚合
        location /api/status {
            access_log off;
            content_by_lua_block {
                local http = require "resty.http"
                local cjson = require "cjson"
                
                local services = {
                    {name = "xiaohongshu", url = "http://xiaohongshu-mcp:8001/health"},
                    {name = "template", url = "http://template-mcp:8002/health"}
                }
                
                local status = {
                    gateway = "running",
                    timestamp = ngx.time(),
                    services = {}
                }
                
                for _, service in ipairs(services) do
                    local httpc = http.new()
                    local res, err = httpc:request_uri(service.url, {
                        method = "GET",
                        timeout = 5000
                    })
                    
                    if res and res.status == 200 then
                        status.services[service.name] = "healthy"
                    else
                        status.services[service.name] = "unhealthy"
                    end
                end
                
                ngx.header.content_type = "application/json"
                ngx.say(cjson.encode(status))
            }
        }
        
        # 根路径
        location = / {
            return 200 '{"message": "DyberPet MCP Gateway", "version": "2.0.0", "services": ["/api/xiaohongshu", "/api/template"]}';
            add_header Content-Type application/json;
        }
        
        # 健康检查
        location /health {
            access_log off;
            return 200 "Gateway OK\n";
            add_header Content-Type text/plain;
        }
    }
    
    # 开发环境直接访问端口 (8080)
    server {
        listen 8080;
        server_name _;
        
        # 小红书服务
        location /xiaohongshu/ {
            rewrite ^/xiaohongshu/(.*) /$1 break;
            proxy_pass http://xiaohongshu_mcp;
            include /etc/nginx/proxy_params;
        }
        
        # 模板服务
        location /template/ {
            rewrite ^/template/(.*) /$1 break;
            proxy_pass http://template_mcp;
            include /etc/nginx/proxy_params;
        }
        
        # SSE特殊处理
        location ~ ^/([^/]+)/mcp/sse {
            set $service $1;
            rewrite ^/[^/]+/(.*) /$1 break;
            
            if ($service = "xiaohongshu") {
                proxy_pass http://xiaohongshu_mcp;
            }
            if ($service = "template") {
                proxy_pass http://template_mcp;
            }
            
            proxy_buffering off;
            proxy_cache off;
            proxy_set_header Connection '';
            proxy_http_version 1.1;
            chunked_transfer_encoding off;
            include /etc/nginx/proxy_params;
        }
        
        # 默认路由
        location / {
            proxy_pass http://xiaohongshu_mcp;
            include /etc/nginx/proxy_params;
        }
    }
    
    # 代理通用参数文件
    # 创建 /etc/nginx/proxy_params
    # proxy_set_header Host $host;
    # proxy_set_header X-Real-IP $remote_addr;
    # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # proxy_set_header X-Forwarded-Proto $scheme;
    # proxy_connect_timeout 60s;
    # proxy_send_timeout 60s;
    # proxy_read_timeout 60s;
} 